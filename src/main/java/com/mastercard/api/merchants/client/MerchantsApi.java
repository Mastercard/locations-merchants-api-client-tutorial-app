/*
 * Merchants Locations API
 * Merchants Locations API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.api.merchants.client;

import com.mastercard.api.merchants.ApiCallback;
import com.mastercard.api.merchants.ApiClient;
import com.mastercard.api.merchants.ApiException;
import com.mastercard.api.merchants.ApiResponse;
import com.mastercard.api.merchants.Configuration;
import com.mastercard.api.merchants.Pair;
import com.mastercard.api.merchants.ProgressRequestBody;
import com.mastercard.api.merchants.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.api.merchants.model.ErrorResponse;
import com.mastercard.api.merchants.model.MerchantSearch;
import com.mastercard.api.merchants.model.Merchants;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantsApi {
    private ApiClient localVarApiClient;

    public MerchantsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getMerchants
     * @param merchantSearch A JSON object containing item data (required)
     * @param limit The number of items to be retrieved (optional)
     * @param offset The page offset used for the query (optional)
     * @param distance Distance measurement for calculating the radius search. Optional The length of distance from the centroid point. Value string(&lt;25). The default will be 5 units (optional)
     * @param distanceUnit Unit of measurement for calculating the radius search. Optional. Measurement of distance unit in miles or kilometers. Value string (MILE or KM) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Merchant details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantsCall(MerchantSearch merchantSearch, Integer limit, Integer offset, Integer distance, String distanceUnit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantSearch;

        // create path and map variables
        String localVarPath = "/searches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (distance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distance", distance));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distance_unit", distanceUnit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantsValidateBeforeCall(MerchantSearch merchantSearch, Integer limit, Integer offset, Integer distance, String distanceUnit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantSearch' is set
        if (merchantSearch == null) {
            throw new ApiException("Missing the required parameter 'merchantSearch' when calling getMerchants(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantsCall(merchantSearch, limit, offset, distance, distanceUnit, _callback);
        return localVarCall;

    }

    /**
     * Get a list of merchant details
     * Returns detailed information on merchants based on the provided query parameters
     * @param merchantSearch A JSON object containing item data (required)
     * @param limit The number of items to be retrieved (optional)
     * @param offset The page offset used for the query (optional)
     * @param distance Distance measurement for calculating the radius search. Optional The length of distance from the centroid point. Value string(&lt;25). The default will be 5 units (optional)
     * @param distanceUnit Unit of measurement for calculating the radius search. Optional. Measurement of distance unit in miles or kilometers. Value string (MILE or KM) (optional)
     * @return Merchants
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Merchant details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public Merchants getMerchants(MerchantSearch merchantSearch, Integer limit, Integer offset, Integer distance, String distanceUnit) throws ApiException {
        ApiResponse<Merchants> localVarResp = getMerchantsWithHttpInfo(merchantSearch, limit, offset, distance, distanceUnit);
        return localVarResp.getData();
    }

    /**
     * Get a list of merchant details
     * Returns detailed information on merchants based on the provided query parameters
     * @param merchantSearch A JSON object containing item data (required)
     * @param limit The number of items to be retrieved (optional)
     * @param offset The page offset used for the query (optional)
     * @param distance Distance measurement for calculating the radius search. Optional The length of distance from the centroid point. Value string(&lt;25). The default will be 5 units (optional)
     * @param distanceUnit Unit of measurement for calculating the radius search. Optional. Measurement of distance unit in miles or kilometers. Value string (MILE or KM) (optional)
     * @return ApiResponse&lt;Merchants&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Merchant details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Merchants> getMerchantsWithHttpInfo(MerchantSearch merchantSearch, Integer limit, Integer offset, Integer distance, String distanceUnit) throws ApiException {
        okhttp3.Call localVarCall = getMerchantsValidateBeforeCall(merchantSearch, limit, offset, distance, distanceUnit, null);
        Type localVarReturnType = new TypeToken<Merchants>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of merchant details (asynchronously)
     * Returns detailed information on merchants based on the provided query parameters
     * @param merchantSearch A JSON object containing item data (required)
     * @param limit The number of items to be retrieved (optional)
     * @param offset The page offset used for the query (optional)
     * @param distance Distance measurement for calculating the radius search. Optional The length of distance from the centroid point. Value string(&lt;25). The default will be 5 units (optional)
     * @param distanceUnit Unit of measurement for calculating the radius search. Optional. Measurement of distance unit in miles or kilometers. Value string (MILE or KM) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Merchant details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something was wrong with the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information was missing or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Insufficient permissions for interacting with the resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantsAsync(MerchantSearch merchantSearch, Integer limit, Integer offset, Integer distance, String distanceUnit, final ApiCallback<Merchants> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantsValidateBeforeCall(merchantSearch, limit, offset, distance, distanceUnit, _callback);
        Type localVarReturnType = new TypeToken<Merchants>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
